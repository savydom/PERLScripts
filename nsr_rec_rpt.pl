#!/bin/perl
# 	$Id: nsr_rec_rpt.pl,v 1.11 2018/06/11 17:08:42 gbrandt Exp $
#
#
#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#
#          File:  nsr_rec_rpt.pl
#        Author:  Gene Brandt
#          Date:  Monday, April 16, 2018
#
#                 Generated by bshdr
#                 Developed by Gene Brandt
#                 504 452-3250
#
###########################################################################
#
#	Description:
#	Visual or hardcopy report on collected nsr recoveries.
#
#	$Log: nsr_rec_rpt.pl,v $
#	Revision 1.11  2018/06/11 17:08:42  gbrandt
#	Fix program version display.
#
#	Revision 1.10  2018/06/11 17:04:11  gbrandt
#	Fix date presentation in the summary.
#
#	Revision 1.9  2018/06/06 13:02:49  gbrandt
#	Added sort to data input to get the date in cronological order.
#
#	Revision 1.8  2018/05/29 16:24:06  gbrandt
#	Reformated userid field.
#	Enhanced column headers.
#	Placed Summary on a separate page.
#
#	Revision 1.7  2018/05/22 12:41:56  gbrandt
#	Changed location of report file to /tmp to allow others to generate reports.
#
#	Revision 1.6  2018/05/16 20:02:04  gbrandt
#	Fixed printer alignment for page and 	added script name and version to report header.
#
#	Revision 1.5  2018/05/16 17:21:35  gbrandt
#	Added functions:
#	PrintPageHeadder
#	GetReportTime
#	GetScriptName
#
#	Revision 1.4  2018/05/08 14:50:23  gbrandt
#	Addedd duration and throuput columns.
#
#	Revision 1.3  2018/05/08 12:42:54  gbrandt
#	Added Solaris printing information.
#	Added failure and success tallies.
#	Added recovery duration.
#
#	Revision 1.2  2018/05/07 17:01:30  gbrandt
#	First practical working version.
#
#	Revision 1.1  2018/04/16 17:57:22  gbrandt
#	Initial revision
#
#
#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                            Environmentals                               #
###########################################################################
#
#

$DataDir      = "/home/gbrandt/scripts/data";
$DataFileName = "$DataDir/NSR_recovers.dat";

# $ReportFileName = "$DataDir/nsr_rec_rpt_$$.rpt";
$ReportFileName = "/tmp/nsr_rec_rpt_$$.rpt";

$DEBUG         = 0;
$MaxLines      = 64;
$PageNumber    = 0;
$Kbyte         = 1024;
$Mbyte         = $Kbyte * $Kbyte;
$Gbyte         = $Mbyte * $Kbyte;
$Tbyte         = $Gbyte * $Kbyte;
$Total_Bytes   = 0;
$Rec_Successes = 0;
$Rec_Failures  = 0;
#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               Processing                                #
###########################################################################
#
#

# browse time|completion status|destination host|end time|job state|number of files|NW Client name/id|size|source host|start time|userid|
#       0                1                 2        3         4             5           6              7     8            9         10
use Time::Local;
unshift( @INC, "/home/scriptid/scripts/BACKUPS/SUBROUTINES" );
require introduction;
#
introduction("nsr Recoveries Report");
GetScriptName();
GetReportTime();

open( RPT, ">$ReportFileName" ) || die "     Error: Unable to open %s $!!\n\n", $ReportFileName;

#
#     Open data file.
#

open( INP, $DataFileName )
  || die "     Error: Unable to open $DataFileName $!!\n\n";
$InputRecordCount = 0;
@RDA              = <INP>;
close(INP);
process_data();

present_summary();
DisplayFinalInstructions();
close($ReportFileName);

#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               Sub Routines                              #
###########################################################################
#
#

sub process_data
{

#
#     For some reason the data is not reported in cronological order
#     so I added the sort to present it in cronotogical order.
#
  foreach $DataLine (sort(@RDA))
  {
    chomp($DataLine);
    if ( $DataLine =~ /#/ )
    {
      $DataLine =~ s/#//;

      @HeadData = split( /\|/, $DataLine );
      PrintPageHeadder();
      next;
    }
    #
    #      End of display headers.
    #

    @RecData        = split( /\|/, $DataLine );
    $RecBrowse      = $RecData[0];
    $Status         = $RecData[1];
    $Destination    = $RecData[2];
    $RecEndTime     = $RecData[3];
    $JobState       = $RecData[4];
    $RecNOF         = $RecData[5];
    $RecHost        = $RecData[6];
    $RecSize        = $RecData[7];
    $RecStartTime   = $RecData[9];
    $UserID         = $RecData[10];
    $DataRecordSize = $RecSize;
    if ( $Status =~ /succeeded/ )
    {
      $Rec_Successes++;
    }
    if ( $Status =~ /failed/ )
    {
      $Rec_Failures++;
    }
    $Total_Bytes += $RecSize;
    if ( $RecSize <= $Kbyte )
    {
      $Container = "bytes";
    }

    if ( ( $RecSize > $Kbyte ) && ( $RecSize <= $Mbyte ) )
    {
      $RecSize /= $Kbyte;
      $Container = "kbytes";
    }

    if ( ( $RecSize > $Mbyte ) && ( $RecSize <= $Gbyte ) )
    {
      $RecSize /= $Mbyte;
      $Container = "mbytes";
    }

    if ( ( $RecSize > $Gbyte ) && ( $RecSize <= $Tbyte ) )
    {
      $RecSize /= ($Gbyte);
      $Container = "mbytes";
    }
    if ($DEBUG)
    {
      printf "     Debug Line: %3d Browse time seconds %d\n", __LINE__, $RecBrowse;
    }
    ( $Browsec, $Browmin, $Browhour, $Browmday, $Browmon, $Browyear ) =
      localtime($RecBrowse);    # Human Browse Time
    if ( $Page_LineCount > $MaxLines )
    {
      PrintPageHeadder();
    }

    $Page_LineCount++;
    printf RPT "    %20s %2d, %4d %2d:%02d    %20s  ",
      $month[$Browmon], $Browmday, $Browyear + 1900, $Browhour, $Browmin,
      $UserID;

    printf RPT "    %20s         %10s  %10s         %10d   %6.2f %6s  ",
      $RecHost,
      $Status, $JobState, $RecNOF, $RecSize, $Container;

    #     Print durartion

    $Duration        = $RecEndTime - $RecStartTime;
    $DurationSeconds = $Duration;

    $Durdays = int( $Duration / 86400 );
    $Duration -= $Durdays * 86400;

    $Durhour = int( $Duration / 3600 );
    $Duration -= $Durhour * 3600;

    $Durmin = int( $Duration / 60 );

    $Dursec = $Duration % 60;

    printf RPT "    %2d:%02d:02", $Durhour, $Durmin, $Dursec;
    #
    #     Compute and present throouput.
    #
    if ( $DurationSeconds > 0 )
    {

      $Throuput = $DataRecordSize / $DurationSeconds;
      if ( $Throuput <= $Kbyte )
      {
        $Unit = " bytes";
      }

      if ( ( $Throuput > $Kbyte ) && ( $Throuput <= $Mbyte ) )
      {
        $Unit     = "kbytes";
        $Throuput = $Throuput / $Kbyte;
      }
      if ( ( $Throuput > $Mbyte ) && ( $Throuput <= $Gbyte ) )
      {
        $Unit     = "mbytes";
        $Throuput = $Throuput / $Mbyte;
      }
      printf RPT "  %8.2f %s/Second", $Throuput, $Unit;
    }
    else
    {
      $Throuput = -1;
      printf RPT "       N/A";
    }
    printf RPT "\n";

  }
}

sub present_summary
{

  #
  #       print blank lines to get to a new page.
  #
  while ( $Page_LineCount < $MaxLines )
  {
    printf RPT " \n";
    $Page_LineCount++;
  }

  if ( ( $Page_LineCount + 12 ) >= $MaxLines )
  {
  }
  printf RPT "          +-----------------------------------------------+\n";    #
  printf RPT "          |               Report Summary                  |\n";    #
  printf RPT "          |       %2d-%s-%4d ", $Rptmday, $month[$Rptmon], $Rptyear + 1900;
  printf RPT "%2d:%02d:%02d",$Rpthour, $Rptmin, $Rptsec; 
#
#     Adjust the number of spaces to add to make the "|" line up.
#     There are 12 places to the start of the month's name.

  $SpaceCount = 23 - length $month[$Rptmon];
  printf RPT ' ' x ($SpaceCount);
  printf RPT "|\n";
  printf RPT "          |       By %s  Version %5s        |\n",$ScriptName, $ProgVer;
  printf RPT "          +-----------------------------------------------+\n";    #
  printf RPT "          |   %6d recover data records read.           |\n", $#RDA;    #
  printf RPT "          | print with lp -o landscape -o lpi=8 -o cpi=20 |\n";  #
  printf RPT "          +-----------------------------------------------+\n";  #
  printf RPT "          +===============================+\n";                  # 11 lines for Summry
  printf RPT "          |%10.2f Tbytes recovered    |\n", $Total_Bytes / $Tbyte;    #
  printf RPT "          +===============================+\n";                       #
  printf RPT "          |        %6d failures        |\n", $Rec_Failures;           #
  printf RPT "          |        %6d Successes       |\n", $Rec_Successes;          #
  printf RPT "          +===============================+\n";                       #
}

sub PrintPageHeadder
{

  if ( $PageNumber > 1 )
  {
    printf RPT "\f";
  }
  printf RPT "     Report Generated: %d-%s-%4d  ", $Rptmday, $month[$Rptmon], $Rptyear + 1900;
  printf RPT "%2d:%02d:%02d     By %s  Version %s", $Rpthour, $Rptmin, $Rptsec, $ScriptName,
    $ProgVer;
  print RPT ' ' x 104;
  printf RPT "Page: %3d\n", ++$PageNumber;
  printf RPT "     ==========================================================================";
  print RPT ' ' x 104;
  printf RPT "=========\n\n";
  #
  #     Display Column Headers.
  #
  printf RPT "                           %10s", $HeadData[0];
  printf RPT "    %20s",                        $HeadData[10];            # userid
  printf RPT "      %20s",                      $HeadData[6];             #  NW Client name/id
  printf RPT "  %10s",                          $HeadData[1];             # completion status
  printf RPT "  %10s",                          $HeadData[4];             # job state
  printf RPT "    %10s",                        $HeadData[5];             # number of files
  printf RPT "            %s",                  $HeadData[7];             # size
                                                                          #
                                                                          #    computed values
                                                                          #
  printf RPT "      %s                %s\n",    "Duration", "Throuput";

  printf RPT "                            %11s", "===========";            # Browse time userid
  printf RPT "   %21s",                          "===================";    # NW Client name/id
  printf RPT "      %20s",                       "====================";
  printf RPT "  %10s",                           "=================";      # Completion status
  printf RPT "   %9s",                           "=========";              # job state
  printf RPT "   %16s",                          "===============";        # number of files
  printf RPT "            %s",                   "====";                   #size
  printf RPT "      %s",                         "========";               # Duration
  printf RPT "                %s",               "========";               # Throuput

  printf RPT "\n";
  $Page_LineCount = 5;
}    # End of PrintPageHeadder

sub GetReportTime
{
  ( $Rptsec, $Rptmin, $Rpthour, $Rptmday, $Rptmon, $Rptyear ) = localtime();
  @month =
    qw( January February March April May June July August September October November December );
}    #   End of GetReportTime

sub GetScriptName
{
  #
  #   Open current running file and look for File:
  #

  open( PROG, $0 ) || do
  {
    printf "     Error: Unable to open %s file.\n", $0;
    $ScriptName = "Undetermined";
  };
  while (<PROG>)
  {
    chomp();
    if (/File:/)
    {
      @FileCols   = split(/\s+/);
      $ScriptName = $FileCols[-1];
      last;
    }
  }
}    #     End of GetScriptName

sub DisplayFinalInstructions
{
  printf "\n\n\n     File: %s created.\n",                                 $ReportFileName;
  printf "     Print command:  lp -o landscape -o lpi=8 -o cpi=20 %s\n\n", $ReportFileName;
  printf "     Don't forget to rm $ReportFileName\n\n";
}    #     End of DisplayFinalInstructions

#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               House Keeping                             #
###########################################################################
#

