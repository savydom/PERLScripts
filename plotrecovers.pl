#!/bin/perl
# 	$Id: plotrecovers.pl,v 1.2 2017/03/31 13:56:34 gbrandt Exp $
#
#
#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#
#          File:  plotrecovers.pl
#        Author:  Gene Brandt
#          Date:  Monday, March 20, 2017
#
#                 Generated by bshdr
#                 Developed by Gene Brandt
#                 504 452-3250
#
##########################################################################################
#                                                                                        #
#                                                                                        #
#                                                                                        #
#        # ###        ##### ##                                       ##                  #
#      /  /###  /  ######  /##                                        ##                 #
#     /  /  ###/  /#   /  / ##                                        ##       #         #
#    /  ##   ##  /    /  /  ##                                        ##      ##         #
#   /  ###           /  /   /                                         ##      ##         #
#  ##   ##          ## ##  /   ###  /###     /###   ###  /###     ### ##    ########     #
#  ##   ##   ###    ## ## /     ###/ #### / / ###  / ###/ #### / ######### ########      #
#  ##   ##  /###  / ## ##/       ##   ###/ /   ###/   ##   ###/ ##   ####     ##         #
#  ##   ## /  ###/  ## ## ###    ##       ##    ##    ##    ##  ##    ##      ##         #
#  ##   ##/    ##   ## ##   ###  ##       ##    ##    ##    ##  ##    ##      ##         #
#   ##  ##     #    #  ##     ## ##       ##    ##    ##    ##  ##    ##      ##         #
#    ## #      /       /      ## ##       ##    ##    ##    ##  ##    ##      ##         #
#     ###     /    /##/     ###  ##       ##    /#    ##    ##  ##    /#      ##         #
#      ######/    /  ########    ###       ####/ ##   ###   ###  ####/        ##         #
#        ###     /     ####       ###       ###   ##   ###   ###  ###          ##        #
#                #                                                                       #
#                 ##                                                                     #
#                                                                                        #
##########################################################################################
#
#	Description:
#	Plot NetWorker recovers.
#
#	$Log: plotrecovers.pl,v $
#	Revision 1.2  2017/03/31 13:56:34  gbrandt
#	First complete working version.
#
#	Revision 1.1  2017/03/20 13:21:31  gbrandt
#	Initial revision
#
#
#
#       Data for this script is gathered by
#       /home/scriptid/scripts/BACKUPS/monitor_saves_recovers.pl
#       and stored in /backup/logs/monitor_saves_recovers.csv
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                            Environmentals                               #
###########################################################################
#
#

$DEBUG           = 0;
$DataFileName    = "/backup/logs/monitor_saves_recovers.csv";
$NSRserversCount = 0;

#  03/19/2017,23:58:00,sscprodeng,Saves,18719,210,TB,Recovers,146,1218,GB,Thu,9,Mar,2017,16:32:11

#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               Processing                                #
###########################################################################
#
#

introduction("Plot NetWorker Recovers");

ReadData();    #     Read raw data into an array.

CreateNSRserverList();  #     Convert Human readable values to standard values.
                        #     These values may be in TG GB MB or KB. Making them
                        #     difficult to plot.

CreatePlotScripts();

#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               Sub Routines                              #
###########################################################################
#
#

sub introduction {
    $ProgName      = shift;
    $NameLength    = length($ProgName);
    $NameHeader    = "|   +++  ";
    $NameTrailer   = "  +++   |";
    $NameOffset    = 10;
    $DashCount     = 16 + $NameLength;
    $VersionLength = 18;                  #      Length of Version information.
    $VersionOffset = ( $DashCount - $VersionLength ) / 2;

    if ($DEBUG) {
        printf "     Debug Line: %3d Program name:%s\n     Length:%d",
          __LINE__, $ProgName, $NameLength;
        printf "     VersionOffset: %d\n", $VersionOffset;
    }
    open( SOURCE, $0 ) || die "Unable to open $0 for reading\n\n";
    while (<SOURCE>) {
        if (/Id:/) {
            @Column  = split(/\s+/);
            $ProgVer = $Column[3];
            printf "\n\n";
            print ' ' x $NameOffset;
            printf "+";
            print '-' x $DashCount;
            print "+\n";

            print ' ' x $NameOffset;
            printf "%s",   $NameHeader;
            printf "%s",   $ProgName;
            printf "%s\n", $NameTrailer;

            print ' ' x $NameOffset;
            print "|";
            print ' ' x $VersionOffset;
            printf "-- Version %4s --", $ProgVer;
            print " "
              if ( $NameLength % 2 == 1 )
              ;   #      Print an extra " " if the name length is an odd number.
            print ' ' x $VersionOffset;
            print "|\n";

            print ' ' x $NameOffset;
            printf "+";
            print '-' x $DashCount;
            print "+\n";
            last;
        }
    }
    close(SOURCE);
}

sub ReadData {
    open( DAT, $DataFileName )
      || die "\n     Unable to open $DataFileName $!!\n\n";
    @DATA = <DAT>;
    if ($DEBUG) {
        printf "     Debug Line: %3d %d Records read.\n", __LINE__, $#DATA + 1;
    }
    close(DAT);
}

sub CreateNSRserverList {
    foreach $DLine (@DATA) {
        chomp($DLine);
        @DataFields = split( /,/, $DLine );
        if ($DEBUG) {
            printf "     %s\n", $DLine;
        }

        #	    ProcessRecord($DLine);
        $RecordDate              = $DataFields[0];
        $RecordServer            = $DataFields[2];
        $RecordSavesessions      = $DataFields[4];
        $RecordSaveQuantity      = $DataFields[5];
        $RecordSaveMultiplier    = $DataFields[6];
        $RecordRecoverSessions   = $DataFields[8];
        $RecordRecoverQuantity   = $DataFields[9];
        $RecordRecoverMultiplier = $DataFields[10];
        $RecordSinceDayOfWeek    = $DataFields[11];
        $RecordSinceDoyOfMonth   = $DataFields[12];
        $RecordSinceMonth        = $DataFields[13];
        $RecordSinceYear         = $DataFields[14];
        $RecordSinceTime         = $DataFields[15];
        if ($DEBUG) {
            printf "     Debug Line: %3d   %d fields.\n", __LINE__,
              $#DataFields;
        }

        if ( $#NSRservers < 1 ) {
            $NSRservers[$NSRserversCount] = $RecordServer;
            if ($DEBUG) {
                printf "     Debug Line: %3d   %s NSR Server.\n", __LINE__,
                  $NSRservers[$NSRserversCount];
            }

            $NSRserversCount++;
        }
        else {
            $MatchCount = 0;
            foreach $NSRSYS (@NSRservers) {
                if ( $NSRSYS eq $RecordServer ) {
                    next;
                }
                else {
                    $MatchCount++;
                    $NSRservers[$MatchCount] = $RecordServer;
                }
            }
        }
    }

    if ($DEBUG) {
        printf "     Debug Line: %3d %d NSR Servers found.\n", __LINE__,
          $#NSRservers + 1;
    }

    #
    #     Open data files for each NSR server.
    #

    foreach $RawSys (@NSRservers) {
        $RawFileName = $RawSys . "SR.dat";
        open( DAT, ">$RawFileName" )
          || die "     Error: Unable to open $RawFileName $!!\n";
        if ($DEBUG) {
            printf "     Debug Line: %3d  Opened %s\n", __LINE__, $RawFileName;
        }
        ProcessData($RawSys);
        close(DAT);
    }
}

sub ProcessData {
    my $System = shift;
    foreach $DLine (@DATA) {
        chomp($DLine);
        @DataFields              = split( /,/, $DLine );
        $RecordDate              = $DataFields[0];
        $RecordServer            = $DataFields[2];
        $RecordSavesessions      = $DataFields[4];
        $RecordSaveQuantity      = $DataFields[5];
        $RecordSaveMultiplier    = $DataFields[6];
        $RecordRecoverSessions   = $DataFields[8];
        $RecordRecoverQuantity   = $DataFields[9];
        $RecordRecoverMultiplier = $DataFields[10];
        $RecordSinceDayOfWeek    = $DataFields[11];
        $RecordSinceDoyOfMonth   = $DataFields[12];
        $RecordSinceMonth        = $DataFields[13];
        $RecordSinceYear         = $DataFields[14];
        $RecordSinceTime         = $DataFields[15];

        if ( $System eq $RecordServer ) {
            #
            #       Standardise on GB for data quantities.
            #

            if ( $RecordSaveMultiplier eq 'MB' ) {
                $RecordSaveQuantity = $RecordSaveQuantity / 1024;
            }

            if ( $RecordSaveMultiplier eq "TB" ) {
                $RecordSaveQuantity = $RecordSaveQuantity * 1024;
            }

            if ( $RecordRecoverMultiplier eq 'MB' ) {
                $RecordRecoverQuantity = $RecordRecoverQuantity / 1024;
            }

            if ( $RecordRecoverMultiplier eq 'TB' ) {
                $RecordRecoverQuantity = $RecordRecoverQuantity * 1024;
            }
            if ($DEBUG) {
                printf
"     Debug Line: %3d Nrec: $RecordDate $RecordServer $RecordSavesessions ",
                  __LINE__;
                printf
"$RecordSaveQuantity $RecordRecoverSessions $RecordRecoverQuantity $RecordSinceDayOfWeek ";
                printf
"$RecordSinceDoyOfMonth $RecordSinceMonth $RecordSinceYear $RecordSinceTime\n";
            }
            printf DAT
"$RecordDate $RecordServer $RecordSavesessions $RecordSaveQuantity $RecordRecoverSessions ";
            printf DAT
"$RecordRecoverQuantity $RecordSinceDayOfWeek $RecordSinceDoyOfMonth $RecordSinceMonth ";
            printf DAT "$RecordSinceYear $RecordSinceTime\n";
        }
    }
}

sub CreatePlotScripts {
    foreach $System (@NSRservers) {
        $DataFile  = $System . "SR.dat";
        $VPlotFile = $System . ".Vplt";
        $PPlotFile = $System . ".Pplt";
        open( VPLT, ">$VPlotFile" )
          || die "     Error: Unable to open $VPlotFile $!!\n";
        open( PPLT, ">$PPlotFile" )
          || die "     Error: Unable to open $PPlotFile $!!\n";
        printf VPLT
          "#\n#     gnuplot file for $System Saves and Recovers\n#\n\n";
        printf PPLT
          "#\n#     gnuplot file for $System Saves and Recovers\n#\n\n";

        printf VPLT "set terminal x11 persist\n";
        printf PPLT "set terminal postscript color\n";

        printf VPLT "set grid\n";
        printf PPLT "set grid\n";

        printf VPLT
"set fontpath \"/usr/X11R6/lib/X11/fonts/Type1\" \"/usr/X11R6/lib/X11/fonts/TrueType\"\n";
        printf PPLT
"set fontpath \"/usr/X11R6/lib/X11/fonts/Type1\" \"/usr/X11R6/lib/X11/fonts/TrueType\"\n";

        printf VPLT "set timefmt \"%m/%%d/%Y,%H:%M:%S\"\n";
        printf PPLT "set timefmt \"%m/%%d/%Y,%H:%M:%S\"\n";

        printf VPLT "set xdata time\n";
        printf PPLT "set xdata time\n";

        printf VPLT "set format x \"%m/%%d/%Y\"\n";
        printf PPLT "set format x \"%m/%%d/%Y\"\n";

        printf VPLT
"set title \"Data Saved vs. Data Recovered\\n%s\" font \"Times new roman bold, 20\"\n",
          $System;
        printf PPLT
"set title \"Data Saved vs. Data Recovered\\n%s\" font \"Times new roman bold, 20\"\n",
          $System;

        printf VPLT
"set ylabel 'Gbytes Saved' font \"Times new roman, 16\" textcolor lt 1\n";
        printf PPLT
"set ylabel 'Gbytes Saved' font \"Times new roman, 16\" textcolor lt 1\n";

        printf VPLT
"set y2label 'Gbytes Restored' font \"Times new roman, 16\" textcolor lt 3\n";
        printf PPLT
"set y2label 'Gbytes Restored ' font \"Times new roman, 16\" textcolor lt 3\n";

        printf VPLT "set y2tics nomirror textcolor lt 3\n";
        printf PPLT "set y2tics nomirror textcolor lt 3\n";

        printf VPLT "set xtics axis font \"helvetica,16\" rotate by -45\n";
        printf PPLT "set xtics axis font \"helvetica,16\" rotate by -45\n";

        printf VPLT "set ytics nomirror textcolor lt 1\n";
        printf PPLT "set ytics nomirror textcolor lt 1\n";

        printf VPLT
"plot \"$DataFile\" using 1:4 with linespoints lt 1 lc 1 lw 2 title \"sscprodeng Gbytes Saved\", \\\n";
        printf PPLT
"plot \"$DataFile\" using 1:4 with linespoints lt 1 lc 1 lw 2 title \"sscprodeng Gbytes Saved\", \\\n";

        printf VPLT
" \"$DataFile\" using 1:6 with linespoints lt 3 lc 3 lw 2 title \"sscprodeng Gbytes Recovered\" axis x1y2\n";
        printf PPLT
" \"$DataFile\" using 1:6 with linespoints lt 3 lc 3 lw 2 title \"sscprodeng Gbytes Recovered\" axis x1y2\n";

        close(PLT);
    }

#
#     Display plotting information.
#


   printf "\n\n";
   printf "    gnuplot commands:\n";
   foreach $System (@NSRservers)
     {
     $VPlotFile = $System . ".Vplt";
     $PPlotFile = $System . ".Pplt";
     printf "    View plot with    gnuplot $VPlotFile\n";
     printf "    Print plot with   gnuplot $PPlotFile|lp\n\n";
     }
}
#
#
###########################################################################
################  S P A W A R   S H A R E D   S E R V I C E S   ###########
###########################################################################
#                               House Keeping                             #
###########################################################################
#
#
